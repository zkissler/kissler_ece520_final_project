var N = null;var searchIndex = {};
searchIndex["elma"]={"doc":"","items":[],"paths":[]};
searchIndex["main"]={"doc":"This is the main function that tests the Elma Rust…","items":[[5,"main","main","The main function implements all the tests for Elma",N,[[]]],[0,"event","","Contains the 'Event' structure and implementation",N,N],[3,"Event","main::event","The 'Event' structure contains all the data required to…",N,N],[12,"_propagate","","Boolean value that stores whether or not the Event should…",0,N],[12,"_empty","","Boolean value that stores whether the Event is empty",0,N],[12,"_name","","Stores the name of the Event",0,N],[11,"new","","Creates a new Event instance",0,[[["string"]],["event"]]],[11,"empty","","Returns the state of the Event empty member variable",0,[[["self"]],["bool"]]],[11,"name","","Returns the name of the Event",0,[[["self"]],["string"]]],[11,"propagate","","Returns the propagate Event member variable",0,[[["self"]],["bool"]]],[11,"reset","","Resets the Event",0,[[["self"]]]],[0,"process","main","Contains the 'Process' structure and implementation",N,N],[3,"Process","main::process","The 'Process' structure contains all the data required to…",N,N],[12,"_name","","The name of the Process",1,N],[12,"_status","","Keeps track fo the 'status_type' enum",1,N],[12,"_period","","Request time between updates",1,N],[12,"_previous_update","","Duration from start to update before last",1,N],[12,"_last_update","","Duration from start to last update",1,N],[12,"_start_time","","Time of the most recent start",1,N],[12,"_num_updates","","The number of times the 'update()' method has been called",1,N],[12,"_process_type","","Keeps track of the 'process_type' enum",1,N],[12,"_manager_ptr","","Keeps track of the Manager for this Process",1,N],[4,"status_type","","Status of the process, as managed by a Manager. Get the…",N,N],[13,"UNINITIALIZED","","",2,N],[13,"STOPPED","","",2,N],[13,"RUNNING","","",2,N],[4,"process_type","","Keeps track of the type of Process. To be used in the…",N,N],[13,"BASIC","","",3,N],[13,"BASIC2","","",3,N],[13,"CRUISE","","",3,N],[11,"new","","Creates a new Process instance",1,[[["string"],["process_type"],["manager"]],["process"]]],[11,"watch","","Tells the Manager to watch for the given Event and respond…",1,N],[11,"emit","","Tells the manager to emit the passed in Event",1,[[["self"],["event"]]]],[11,"update_all","","Calls the 'update()' function for the given Process",1,[[["self"],["duration"]]]],[11,"update","","Manager interface for the 'update()' method",1,[[["self"]]]],[11,"init","","Manager interface for the 'init()' method",1,[[["self"]]]],[11,"start","","Manager interface for the 'start()' method",1,[[["self"]]]],[11,"stop","","Manager interface for the 'stop()' method",1,[[["self"]]]],[11,"init_all","","Calls the 'init()' function for the given Process",1,[[["self"]]]],[11,"start_all","","Calls the 'start()' function for the given Process",1,[[["self"],["duration"]]]],[11,"stop_all","","Calls the 'stop()' function for the given Process",1,[[["self"]]]],[11,"name","","Returns the name of the process",1,[[["self"]],["string"]]],[11,"period","","Returns the period for the given Process",1,[[["self"]],["duration"]]],[11,"num_updates","","Returns the number of updates for the given Process",1,[[["self"]],["usize"]]],[11,"start_time","","Returns the time the Process was last started by the Manager",1,[[["self"]],["instant"]]],[11,"last_update","","Returns the duration of time between the start time and…",1,[[["self"]],["duration"]]],[11,"previous_update","","Returns the duration of time between the start time and…",1,[[["self"]],["duration"]]],[11,"milli_time","","Returns the time since the last update, in milliseconds",1,[[["self"]],["duration"]]],[0,"manager","main","Contains the 'Manager' structure and implementation",N,N],[3,"Manager","main::manager","The 'Manager' structure contains all the data required to…",N,N],[12,"_name","","The name of the Manager",4,N],[12,"_processes","","Stores all the Processes for this Manager",4,N],[12,"size","","Stores the current size",4,N],[12,"capacity","","Stores the capacity of the current Manager",4,N],[12,"_elapsed","","Returns the elapsed amount of time",4,N],[12,"_start_time","","Stores the start time",4,N],[12,"_event_handlers","","A map of the event_names to the handlers",4,N],[11,"new","","Creates a new Manager instance",4,[[["string"]],["manager"]]],[11,"watch","","The 'watch' function puts the event name and the…",4,N],[11,"emit","","Emits the particular Event and calls the handler function",4,[[["self"],["event"]]]],[11,"schedule","","Adds the passed in Process to the scheduler for this Manager",4,[[["self"],["process"],["u64"]]]],[11,"run","","Starts and stops all the Processes and calls their…",4,[[["self"],["u64"]]]],[11,"update","","Calls the 'update()' function for all the Processes",4,[[["self"]]]],[11,"init","","Calls the 'init()' function for all the Processes",4,[[["self"]]]],[11,"start","","Calls the 'start()' function for all the Processes",4,[[["self"]]]],[11,"stop","","Calls the 'stop()' function for all the Processes",4,[[["self"]]]],[11,"name","","Returns the name of the current Manager",4,[[["self"]],["string"]]],[0,"basic_process","main","",N,N],[3,"BasicProcess","main::basic_process","",N,N],[12,"_process","","",5,N],[11,"new","","",5,[[["string"],["manager"]],["basicprocess"]]],[0,"basic_process2","main","",N,N],[3,"BasicProcess2","main::basic_process2","",N,N],[12,"_process","","",6,N],[11,"new","","",6,[[["string"],["manager"]],["basicprocess2"]]],[11,"into","main::event","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","main::process","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","main::manager","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","main::basic_process","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","main::basic_process2","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"clone","main::event","",0,[[["self"]],["event"]]],[11,"clone","main::process","",1,[[["self"]],["process"]]],[11,"clone","","",2,[[["self"]],["status_type"]]],[11,"clone","","",3,[[["self"]],["process_type"]]],[11,"clone","main::manager","",4,[[["self"]],["manager"]]]],"paths":[[3,"Event"],[3,"Process"],[4,"status_type"],[4,"process_type"],[3,"Manager"],[3,"BasicProcess"],[3,"BasicProcess2"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
